name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./cmd/llvm-obfuscator

        file: ./cmd/llvm-obfuscator/Dockerfile.backend.multiarch
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./cmd/llvm-obfuscator/frontend
        file: ./cmd/llvm-obfuscator/frontend/Dockerfile.frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate deployment artifacts
      run: |
        # Create deployment directory
        mkdir -p deployment
        
        # Generate docker-compose.yml for production
        cat > deployment/docker-compose.prod.yml << 'EOF'
        version: "3.9"
        
        services:
          backend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
            environment:
              - OBFUSCATOR_DISABLE_AUTH=false
            volumes:
              - ./reports:/app/reports
            expose:
              - "8000"
            restart: unless-stopped
        
          frontend:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
            ports:
              - "80:80"
            depends_on:
              - backend
            restart: unless-stopped
        EOF
        
        # Generate deployment script
        cat > deployment/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Deploying LLVM Obfuscator..."
        
        # Login to GitHub Container Registry
        echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
        
        # Pull latest images
        docker-compose -f docker-compose.prod.yml pull
        
        # Start services
        docker-compose -f docker-compose.prod.yml up -d
        
        echo "Deployment complete!"
        echo "Frontend available at: http://localhost"
        echo "Backend API available at: http://localhost/api"
        EOF
        
        chmod +x deployment/deploy.sh
        
        # Generate README for deployment
        cat > deployment/README.md << 'EOF'
        # LLVM Obfuscator Deployment
        
        This directory contains production deployment files for the LLVM Obfuscator.
        
        ## Quick Start
        
        1. Set environment variables:
           ```bash
           export GITHUB_TOKEN=your_github_token
           export GITHUB_USERNAME=your_username
           ```
        
        2. Run deployment:
           ```bash
           ./deploy.sh
           ```
        
        ## Manual Deployment
        
        ```bash
        # Login to GitHub Container Registry
        echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
        
        # Start services
        docker-compose -f docker-compose.prod.yml up -d
        ```
        
        ## Services
        
        - **Frontend**: Available at http://localhost
        - **Backend API**: Available at http://localhost/api
        - **Reports**: Stored in ./reports directory
        
        ## Environment Variables
        
        - `OBFUSCATOR_DISABLE_AUTH`: Set to `false` for production (default: `true`)
        EOF

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-files
        path: deployment/
        retention-days: 30

    - name: Notify deployment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "ðŸš€ Docker images built and pushed successfully!"
        echo "ðŸ“¦ Images available at:"
        echo "  - Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest"
        echo "  - Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest"
        echo "ðŸ“‹ Deployment artifacts uploaded as GitHub Actions artifact"
